makeCacheMatrix <- function(x = matrix()) { ##define the argument
inv <- Null                    ##initialize inv as Null
set <- function(y) {           ##define the set function to assign new
x <<- y                      ##Value of matrix in parent environment
inv <<- NUll                 ##If there is a new matrix, reset inv to NULL
}
get <- function() x          ##define the get function-return value of matrix
setinverse <- function(inverse) inv <<- inverse #assigns value of inv in parent
getinverse <- function() inv     ##gets the value of inv where called
list(set = set, get = get, setinverse = setinverse, getinverse= getinverse)
## to refer to the function with $
}
## Write a short comment describing this function
##computing the inverse of the special matrix returned by makeCacheMatrix
##if the inverse has already been calculated then it will retrieve the inverse
##from cashe
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinverse()
if(!is.null(inv)){       ##checking if the inverse is NULL
message("getting cached data")
return(inv)              ##return inverse value
}
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
inv            ##return a matrix the is the inverse of x
}
f <- makeCacheMatrix(matrix(1:8,2,4))
f$get()
makeCacheMatrix <- function(x = matrix()) {
inv <- Null
set <- function(y) {
x <<- y
inv <<- NUll
}
get <- function()x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get, setinverse = setinverse, getinverse= getinverse)
## to refer to the function with $
}
## Write a short comment describing this function
##computing the inverse of the special matrix returned by makeCacheMatrix
##if the inverse has already been calculated then it will retrieve the inverse
##from cashe
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinverse()
if(!is.null(inv)){
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
source("ProgrammingAssignment2/cachematrix.R")
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
makeCacheMatrix <- function(x = matrix()) {
inv <- Null
set <- function(y) {
x <<- y
inv <<- Null
}
get <- function()x
setinv <- function(inverse)inv <<- inverse
getinv <- function(){
inver <- ginv(x)
inver%*%x
}
list(set = set, get = get, setinv = setinv, getinv= getinv)
## to refer to the function with $
}
## Write a short comment describing this function
## Computing the inverse of the special matrix returned by makeCacheMatrix above
## If the inverse has already been calculated (and the matrix has not changed),
## then it will retrieve the inverse from the cache
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv()
if(!is.null(inv)){
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
f <- makeCacheMatrix(matrix(1:8, 2, 4))
library(MASS)
makeCacheMatrix <- function(x = matrix()) {
inv <- Null
set <- function(y) {
x <<- y
inv <<- Null
}
get <- function()x
setinv <- function(inverse)inv <<- inverse
getinv <- function(){
inver <- ginv(x)
inver%*%x
}
list(set = set, get = get, setinv = setinv, getinv= getinv)
## to refer to the function with $
}
## Write a short comment describing this function
## Computing the inverse of the special matrix returned by makeCacheMatrix above
## If the inverse has already been calculated (and the matrix has not changed),
## then it will retrieve the inverse from the cache
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv()
if(!is.null(inv)){
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
f <- makeCacheMatrix(matrix(1:8, 2, 4))
f$get()
f$getinv()
cacheSolve(f)
source("~/GitHub/ProgrammingAssignment2/cachematrix.R")
